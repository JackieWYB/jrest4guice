====一个轻量级的基于Google Guice的Restful服务框架，支持JPA、JAAS、分布式资源对象,对OSGI的支持也在计划中.====
*Demo演示:*
[http://cnoss.vicp.net/]
----
*特点:*
  * 基于Google guice 
  * 零配置，服务的自动扫描注册 
  * 非侵入式，用户不需要实现特定的接口来实现Restful服务，只需要通过@RESTful来声明  
  * 支持Post. Get. Put. Delete操作 
  * 灵活的注入(支持上下文环境request/response/session以及参数的自动注入) 
  * 根据客户端要求返回不同类型的数据（xml/json/html）
  * 通过@PageFlow实现对MVC module2的支持，输出结果支持Velocity、Freemarker和Spry模板引擎（当返回类型是text/html时才有效）
  * 支持JPA，通过增强的BaseEntityManager实现实体的CRUD 
  * 支持事务，通过@Transactional注解声明事务的类型 
  * 支持JAAS，通过@RolesAllowed注解声明操作所需要的角色 
  * 支持分布式资源对象，实现业务逻辑的分布式部署 
*下一步计划:*
  * 数据验证的支持
  * OSGI的支持 
  * 分布式事务的支持 

*代码示例:*
{{{
/**  
 * @author <a href="mailto:zhangyouqun@gmail.com">cnoss (QQ:86895156)</a>  
 * 联系人的资源对象  
 * 声明remoteable为真（可以通过@RemoteReference的注入到任一资源对象,通常用在跨应用的资源调用上）  
 */  
@RESTful(name = "ContactResource", remoteable = true)   
@Path( { "/contact", "/contacts/{contactId}" })   
public class ContactResource {   
    @Inject  
    private ContactServiceDomain domain;   
  
    /**  
     * 创建新的联系人   
     * contact 联系人实体  
     */  
    @Post  
    public String createContact(@ModelBean Contact contact) {   
        return this.domain.createContact(contact);   
    }   
  
    /**  
     * 修改联系人信息   
     * contact 联系人实体  
     */  
    @Put  
    public void putContact(@ModelBean Contact contact) {   
        this.domain.updateContact(contact);   
    }   
  
    /**  
     * 显示联系人列表   
     * pageIndex 页码   
     * pageSize 每页记录数  
     * 注：  
     *  @PageFlow ：当服务端返回类型是Text/Html类型时，重定向用户的请求到指定的页面，实现最基本功能的MVC。  
     *      在这里，指明当操作成功时，重定向到列表人列表页面，并使用Velocity模板进行渲染，当操作失败时，  
     *      将用户请求重定向到操作出错页面。  
     */  
    @Get  
    @Path("/contacts")   
    @PageFlow(   
            success = @PageInfo(url = "/template/contacts.vm",render=ViewRenderType.VELOCITY),    
            error = @PageInfo(url = "/template/error.vm",render=ViewRenderType.VELOCITY))   
    public Page<Contact> listContacts(int pageIndex, int pageSize) {   
        return this.domain.listContacts(pageIndex, pageSize);   
    }   
  
    /**  
     * 显示单个联系人的信息   
     * contactId 联系对象ID  
     */  
    @Get  
    @PageFlow(success = @PageInfo(url = "/template/contactDetail.vm"))   
    public Contact getContact(@Parameter("contactId") String contactId) {   
        return this.domain.findContactById(contactId);   
    }   
  
    /**  
     * 删除指定ID的联系人   
     * contactId 联系对象ID  
     */  
    @Delete  
    public void deleteContact(@Parameter("contactId") String contactId) {   
        this.domain.deleteContact(contactId);   
    }   
}   
  
/**  
 * 业务领域对象  
 * @author <a href="mailto:zhangyouqun@gmail.com">cnoss (QQ:86895156)</a>  
 *  
 */  
@SuppressWarnings( { "unused" })   
public class ContactServiceDomain{   
    private BaseEntityManager<String, Contact> entityManager;   
  
    @Inject  
    private void init(EntityManager em) {   
        this.entityManager = new BaseEntityManager<String, Contact>(   
                Contact.class, em);   
    }   
  
    @Transactional  
    public String createContact(Contact contact) {   
        if (contact == null)   
            throw new RuntimeException("联系人的内容不能为空");   
  
        if (this.entityManager.loadByNamedQuery("byName", contact.getName()) != null) {   
            throw new RuntimeException("联系人的姓名相同，请重新输入");   
        }   
  
        this.entityManager.create(contact);   
        return contact.getId();   
    }   
  
    @Transactional //事务声明   
    @RolesAllowed({"admin","user"}) //权限声明   
    public void deleteContact(String contactId) {   
        String[] ids = contactId.split(",");   
        Contact contact;   
        for (String id : ids) {   
            contact = this.findContactById(id);   
            if (contact == null)   
                throw new RuntimeException("联系人不存在");   
            this.entityManager.delete(contact);   
        }   
    }   
  
    @Transactional(type=TransactionalType.READOLNY)   
    public Contact findContactById(String contactId) {   
        return this.entityManager.load(contactId);   
    }   
  
    @Transactional(type=TransactionalType.READOLNY)   
    public Page<Contact> listContacts(int pageIndex, int pageSize)   
            throws RuntimeException {   
        return this.entityManager.pageByNamedQuery("list",   
                new Pagination(pageIndex, pageSize));   
    }   
  
    @Transactional  
    public void updateContact(Contact contact) {   
        if (contact == null)   
            throw new RuntimeException("联系人的内容不能为空");   
           
        Contact tmpContact = this.entityManager.loadByNamedQuery("byName", contact.getName());   
        if(tmpContact != null && !contact.getId().equals(tmpContact.getId()))   
            throw new RuntimeException("联系人的姓名相同，请重新输入");   
  
        this.entityManager.update(contact);   
    }   
}   
  
  
/**  
 * 远程资源引用的示例  
 * @author <a href="mailto:zhangyouqun@gmail.com">cnoss (QQ：86895156)</a>  
 *   
 */  
@Path({"/testCallRemote"})   
public class TestRemoteResource {   
    @Inject  
    @RemoteReference //注入远程资源对象的引用   
    private ContactResource service;   
  
    @Get  
    @ProduceMime( {MimeType.MIME_OF_JSON,MimeType.MIME_OF_JAVABEAN})   
    public Page<Contact> listContacts(int pageIndex, int pageSize) {   
        return this.service.listContacts(pageIndex, pageSize);   
    }   
}  
}}}

*Demo演示:*
[http://cnoss.vicp.net/]
----
*请大家直接从SVN中获取JRest4Guice工程即可（使用Maven）*

*真诚希望大家提出宝贵意见，联系方式：*
  * Email：zhangyouqun@gmail.com
  * QQ: 86895156
  * MSN: zhangyouqun@hotmail.com